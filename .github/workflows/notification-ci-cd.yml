name: ci-cd-pipeline file notifcation-service
on: 
  push:
    branches: 
      - master
env:
    IMAGE: devi-notification-service
    TAG: latest
    CLUSTER: arn:aws:ecs:us-east-2:402338187344:cluster/devi-aws-workshop-task
    SERVICE: arn:aws:ecs:us-east-2:402338187344:service/devi-aws-workshop-task/notification-service
jobs:

  build:
    runs-on: ubuntu-latest
    name: build and push docker image
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Docker Setup Docker
        uses: crazy-max/ghaction-setup-docker@v2.2.0
      - name: docker authenticate with ecr repo
        run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 402338187344.dkr.ecr.us-east-2.amazonaws.com
      - name: build docker image
        run: docker build -t $IMAGE:$TAG .
      - name: tag docker image
        run: docker tag $IMAGE:$TAG 402338187344.dkr.ecr.us-east-2.amazonaws.com/$IMAGE:$TAG
      - name: push docker image
        run: docker push 402338187344.dkr.ecr.us-east-2.amazonaws.com/$IMAGE:$TAG
  run-migration:
    runs-on: ubuntu-latest
    name: migration-run
    needs: build
    steps:
        - name: configure aws credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-2
                
        - name: run migration as task
          run: aws ecs run-task --cluster $CLUSTER --task-definition arn:aws:ecs:us-east-2:402338187344:task-definition/devi-notification-service-migration-td:1 --region us-east-2 --overrides "{\"containerOverrides\":[{\"name\":\"migration\",\"command\":[\"npm\",\"run\",\"migrate\"]}]}"
